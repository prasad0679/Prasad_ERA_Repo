# -*- coding: utf-8 -*-
"""model_v4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qtTSVfeUye5SMnafzgzBrxp_EsP0l2qc
"""

from google.colab import drive
drive.mount('/content/drive')

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms

# CUDA?
cuda = torch.cuda.is_available()
print("CUDA Available?", cuda)

class Net(nn.Module):
    #This defines the structure of the NN.
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Sequential(
            nn.Conv2d(1, 8, 3, padding=0),
            nn.ReLU(),
            nn.BatchNorm2d(8),
            nn.Dropout(0.1)
        ) # 26*26*8

        self.conv2 = nn.Sequential(
            nn.Conv2d(8, 16, 3, padding=0),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(0.1)
        ) # 24*24*16

        self.trans1 = nn.Sequential(
            nn.Conv2d(16, 10, 1, padding=0),
            nn.ReLU(),
            nn.BatchNorm2d(10),
            nn.Dropout(0.1)
        ) # 24*24*10

        self.conv3 = nn.Sequential(
            nn.Conv2d(10, 8, 3, padding=0),
            nn.ReLU(),
            nn.BatchNorm2d(8),
            nn.Dropout(0.1),
            nn.MaxPool2d(2, 2)
        ) # 22*22*8 | 11*11*8

        self.conv4 = nn.Sequential(
            nn.Conv2d(8, 16, 3, padding=0),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(0.1)
        ) # 9*9*16

        self.conv5 = nn.Sequential(
            nn.Conv2d(16, 16, 3, padding=0),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(0.1),
            #nn.MaxPool2d(2, 2)
        ) # 7*7*16

        self.trans2 = nn.Sequential(
            nn.Conv2d(16, 10, 1, padding=0)
        ) # 7*7*10

        self.conv6 = nn.Sequential(
            nn.Conv2d(10, 16, 3, padding=0),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(0.1),
            #nn.MaxPool2d(2, 2)
        ) # 5*5*16

        self.conv7 = nn.Sequential(
            nn.Conv2d(16, 16, 3, padding=0), # 1*1
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(0.1)
        ) # 3*3*16

        self.conv8 = nn.Sequential(
            nn.Conv2d(16, 10, 1, padding=0),
            nn.AvgPool2d(kernel_size=3)
        ) # 3*3*10 | 1*1*10

    def forward(self, x):
      x = self.conv1(x)
      #print("size after 1st layer: " ,x.shape)
      x = self.conv2(x)
      x = self.trans1(x)
      x = self.conv3(x)
      #print("size after 2nd layer: " ,x.shape)
      x = self.conv4(x)
      #print("size after 3rd layer: " ,x.shape)
      x = self.conv5(x)
      x = self.trans2(x)
      x = self.conv6(x)
      x = self.conv7(x)
      x = self.conv8(x)
      #print("size after 4th layer: " ,x.shape)
      x = x.view(x.size(0), -1)
      #print("size after flattening: " ,x.shape)
      x = F.log_softmax(x, dim=1)
      return x