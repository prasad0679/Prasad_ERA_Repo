# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkvXkxaCHQDYLpOZ_uDdjFX2_OP8u6pc
"""

from google.colab import drive
drive.mount('/content/drive')

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms

# CUDA?
cuda = torch.cuda.is_available()
print("CUDA Available?", cuda)

class Net(nn.Module):
    #This defines the structure of the NN.
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3) # 26*26*32
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3) # 24*24*64 | 12*12*64
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3) # 10*10*128
        self.conv4 = nn.Conv2d(128, 256, kernel_size=3) # 8*8*256 | 4*4*256
        #self.fc1 = nn.Linear(320, 50) --> This is incorrect shape hence commented.
        self.fc1 = nn.Linear(4096, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        x = F.relu(self.conv1(x),2)
        #print("size after 1st layer: " ,x.shape)
        x = F.relu(F.max_pool2d(self.conv2(x), 2))
        #print("size after 2nd layer and max pooling: " ,x.shape)
        x = F.relu(self.conv3(x), 2)
        #print("size after 3rd layer: " ,x.shape)
        x = F.relu(F.max_pool2d(self.conv4(x), 2)) 
        #print("size after 4th layer and max pooling: " ,x.shape)
        #x = x.view(-1, 320)
        x = x.view(-1, 4096)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)